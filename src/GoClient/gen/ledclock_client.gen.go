// Package ledclock provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ledclock

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// PostApiThemeParams defines parameters for PostApiTheme.
type PostApiThemeParams struct {
	// Id Thema-id (zie /api/themes)
	Id string `form:"id" json:"id"`
}

// PostApiTimezoneJSONBody defines parameters for PostApiTimezone.
type PostApiTimezoneJSONBody struct {
	// Timezone Nieuwe tijdzone, bv. Europe/Amsterdam
	Timezone string `json:"timezone"`
}

// PostApiTimezoneJSONRequestBody defines body for PostApiTimezone for application/json ContentType.
type PostApiTimezoneJSONRequestBody PostApiTimezoneJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiPing request
	GetApiPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSystemReboot request
	PostApiSystemReboot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiTheme request
	DeleteApiTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTheme request
	GetApiTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiTheme request
	PostApiTheme(ctx context.Context, params *PostApiThemeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiThemes request
	GetApiThemes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiTimezone request
	DeleteApiTimezone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimezone request
	GetApiTimezone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiTimezoneWithBody request with any body
	PostApiTimezoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiTimezone(ctx context.Context, body PostApiTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimezones request
	GetApiTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSystemReboot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSystemRebootRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiThemeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiThemeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiTheme(ctx context.Context, params *PostApiThemeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiThemeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiThemes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiThemesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiTimezone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiTimezoneRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimezone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimezoneRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiTimezoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiTimezoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiTimezone(ctx context.Context, body PostApiTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiTimezoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimezonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiPingRequest generates requests for GetApiPing
func NewGetApiPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSystemRebootRequest generates requests for PostApiSystemReboot
func NewPostApiSystemRebootRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/reboot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiThemeRequest generates requests for DeleteApiTheme
func NewDeleteApiThemeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/theme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiThemeRequest generates requests for GetApiTheme
func NewGetApiThemeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/theme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiThemeRequest generates requests for PostApiTheme
func NewPostApiThemeRequest(server string, params *PostApiThemeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/theme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiThemesRequest generates requests for GetApiThemes
func NewGetApiThemesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/themes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiTimezoneRequest generates requests for DeleteApiTimezone
func NewDeleteApiTimezoneRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimezoneRequest generates requests for GetApiTimezone
func NewGetApiTimezoneRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiTimezoneRequest calls the generic PostApiTimezone builder with application/json body
func NewPostApiTimezoneRequest(server string, body PostApiTimezoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiTimezoneRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiTimezoneRequestWithBody generates requests for PostApiTimezone with any type of body
func NewPostApiTimezoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiTimezonesRequest generates requests for GetApiTimezones
func NewGetApiTimezonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiPingWithResponse request
	GetApiPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPingResponse, error)

	// PostApiSystemRebootWithResponse request
	PostApiSystemRebootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiSystemRebootResponse, error)

	// DeleteApiThemeWithResponse request
	DeleteApiThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiThemeResponse, error)

	// GetApiThemeWithResponse request
	GetApiThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiThemeResponse, error)

	// PostApiThemeWithResponse request
	PostApiThemeWithResponse(ctx context.Context, params *PostApiThemeParams, reqEditors ...RequestEditorFn) (*PostApiThemeResponse, error)

	// GetApiThemesWithResponse request
	GetApiThemesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiThemesResponse, error)

	// DeleteApiTimezoneWithResponse request
	DeleteApiTimezoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiTimezoneResponse, error)

	// GetApiTimezoneWithResponse request
	GetApiTimezoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTimezoneResponse, error)

	// PostApiTimezoneWithBodyWithResponse request with any body
	PostApiTimezoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiTimezoneResponse, error)

	PostApiTimezoneWithResponse(ctx context.Context, body PostApiTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiTimezoneResponse, error)

	// GetApiTimezonesWithResponse request
	GetApiTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTimezonesResponse, error)
}

type GetApiPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// HeapFree Vrije heap in bytes
		HeapFree *int `json:"heap_free,omitempty"`

		// Now Unix epoch (ms)
		Now      int64 `json:"now"`
		Pong     bool  `json:"pong"`
		UptimeMs int64 `json:"uptime_ms"`

		// WifiMode Huidige Wi-Fi modus
		WifiMode *string `json:"wifi_mode,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSystemRebootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message   *string `json:"message,omitempty"`
		Rebooting *bool   `json:"rebooting,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiSystemRebootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSystemRebootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ActiveId   string `json:"active_id"`
		ActiveName string `json:"active_name"`
		IsDefault  bool   `json:"is_default"`
		Ok         bool   `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ActiveId         string  `json:"active_id"`
		ActiveName       string  `json:"active_name"`
		HasSavedOverride bool    `json:"has_saved_override"`
		IsDefault        bool    `json:"is_default"`
		SavedOverrideId  *string `json:"saved_override_id"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ActiveId   string `json:"active_id"`
		ActiveName string `json:"active_name"`
		IsDefault  bool   `json:"is_default"`
		Ok         bool   `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiThemesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id        string `json:"id"`
		IsActive  bool   `json:"is_active"`
		IsDefault bool   `json:"is_default"`
		Name      string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiThemesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiThemesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiTimezoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Dstoffset Zomertijd-offset in seconden na reset.
		Dstoffset *int `json:"dstoffset,omitempty"`

		// Gmtoffset Vaste offset t.o.v. UTC in seconden na reset.
		Gmtoffset *int    `json:"gmtoffset,omitempty"`
		Message   *string `json:"message,omitempty"`
		Success   *bool   `json:"success,omitempty"`

		// Timezone Actieve tijdzone na reset (standaard of automatisch)
		Timezone *string `json:"timezone,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiTimezoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiTimezoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimezoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Dstoffset Zomertijd-offset in seconden (meestal 0 of 3600).
		Dstoffset int `json:"dstoffset"`

		// Gmtoffset Vaste offset t.o.v. UTC in seconden (zonder DST).
		Gmtoffset int    `json:"gmtoffset"`
		Timezone  string `json:"timezone"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiTimezoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimezoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiTimezoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
		Success *bool   `json:"success,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiTimezoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiTimezoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimezonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Timezones *[]string `json:"timezones,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiTimezonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimezonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiPingWithResponse request returning *GetApiPingResponse
func (c *ClientWithResponses) GetApiPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPingResponse, error) {
	rsp, err := c.GetApiPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPingResponse(rsp)
}

// PostApiSystemRebootWithResponse request returning *PostApiSystemRebootResponse
func (c *ClientWithResponses) PostApiSystemRebootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiSystemRebootResponse, error) {
	rsp, err := c.PostApiSystemReboot(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSystemRebootResponse(rsp)
}

// DeleteApiThemeWithResponse request returning *DeleteApiThemeResponse
func (c *ClientWithResponses) DeleteApiThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiThemeResponse, error) {
	rsp, err := c.DeleteApiTheme(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiThemeResponse(rsp)
}

// GetApiThemeWithResponse request returning *GetApiThemeResponse
func (c *ClientWithResponses) GetApiThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiThemeResponse, error) {
	rsp, err := c.GetApiTheme(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiThemeResponse(rsp)
}

// PostApiThemeWithResponse request returning *PostApiThemeResponse
func (c *ClientWithResponses) PostApiThemeWithResponse(ctx context.Context, params *PostApiThemeParams, reqEditors ...RequestEditorFn) (*PostApiThemeResponse, error) {
	rsp, err := c.PostApiTheme(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiThemeResponse(rsp)
}

// GetApiThemesWithResponse request returning *GetApiThemesResponse
func (c *ClientWithResponses) GetApiThemesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiThemesResponse, error) {
	rsp, err := c.GetApiThemes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiThemesResponse(rsp)
}

// DeleteApiTimezoneWithResponse request returning *DeleteApiTimezoneResponse
func (c *ClientWithResponses) DeleteApiTimezoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiTimezoneResponse, error) {
	rsp, err := c.DeleteApiTimezone(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiTimezoneResponse(rsp)
}

// GetApiTimezoneWithResponse request returning *GetApiTimezoneResponse
func (c *ClientWithResponses) GetApiTimezoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTimezoneResponse, error) {
	rsp, err := c.GetApiTimezone(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimezoneResponse(rsp)
}

// PostApiTimezoneWithBodyWithResponse request with arbitrary body returning *PostApiTimezoneResponse
func (c *ClientWithResponses) PostApiTimezoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiTimezoneResponse, error) {
	rsp, err := c.PostApiTimezoneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiTimezoneResponse(rsp)
}

func (c *ClientWithResponses) PostApiTimezoneWithResponse(ctx context.Context, body PostApiTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiTimezoneResponse, error) {
	rsp, err := c.PostApiTimezone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiTimezoneResponse(rsp)
}

// GetApiTimezonesWithResponse request returning *GetApiTimezonesResponse
func (c *ClientWithResponses) GetApiTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTimezonesResponse, error) {
	rsp, err := c.GetApiTimezones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimezonesResponse(rsp)
}

// ParseGetApiPingResponse parses an HTTP response from a GetApiPingWithResponse call
func ParseGetApiPingResponse(rsp *http.Response) (*GetApiPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// HeapFree Vrije heap in bytes
			HeapFree *int `json:"heap_free,omitempty"`

			// Now Unix epoch (ms)
			Now      int64 `json:"now"`
			Pong     bool  `json:"pong"`
			UptimeMs int64 `json:"uptime_ms"`

			// WifiMode Huidige Wi-Fi modus
			WifiMode *string `json:"wifi_mode,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiSystemRebootResponse parses an HTTP response from a PostApiSystemRebootWithResponse call
func ParsePostApiSystemRebootResponse(rsp *http.Response) (*PostApiSystemRebootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSystemRebootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message   *string `json:"message,omitempty"`
			Rebooting *bool   `json:"rebooting,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiThemeResponse parses an HTTP response from a DeleteApiThemeWithResponse call
func ParseDeleteApiThemeResponse(rsp *http.Response) (*DeleteApiThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ActiveId   string `json:"active_id"`
			ActiveName string `json:"active_name"`
			IsDefault  bool   `json:"is_default"`
			Ok         bool   `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiThemeResponse parses an HTTP response from a GetApiThemeWithResponse call
func ParseGetApiThemeResponse(rsp *http.Response) (*GetApiThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ActiveId         string  `json:"active_id"`
			ActiveName       string  `json:"active_name"`
			HasSavedOverride bool    `json:"has_saved_override"`
			IsDefault        bool    `json:"is_default"`
			SavedOverrideId  *string `json:"saved_override_id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiThemeResponse parses an HTTP response from a PostApiThemeWithResponse call
func ParsePostApiThemeResponse(rsp *http.Response) (*PostApiThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ActiveId   string `json:"active_id"`
			ActiveName string `json:"active_name"`
			IsDefault  bool   `json:"is_default"`
			Ok         bool   `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiThemesResponse parses an HTTP response from a GetApiThemesWithResponse call
func ParseGetApiThemesResponse(rsp *http.Response) (*GetApiThemesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiThemesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id        string `json:"id"`
			IsActive  bool   `json:"is_active"`
			IsDefault bool   `json:"is_default"`
			Name      string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiTimezoneResponse parses an HTTP response from a DeleteApiTimezoneWithResponse call
func ParseDeleteApiTimezoneResponse(rsp *http.Response) (*DeleteApiTimezoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiTimezoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Dstoffset Zomertijd-offset in seconden na reset.
			Dstoffset *int `json:"dstoffset,omitempty"`

			// Gmtoffset Vaste offset t.o.v. UTC in seconden na reset.
			Gmtoffset *int    `json:"gmtoffset,omitempty"`
			Message   *string `json:"message,omitempty"`
			Success   *bool   `json:"success,omitempty"`

			// Timezone Actieve tijdzone na reset (standaard of automatisch)
			Timezone *string `json:"timezone,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiTimezoneResponse parses an HTTP response from a GetApiTimezoneWithResponse call
func ParseGetApiTimezoneResponse(rsp *http.Response) (*GetApiTimezoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimezoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Dstoffset Zomertijd-offset in seconden (meestal 0 of 3600).
			Dstoffset int `json:"dstoffset"`

			// Gmtoffset Vaste offset t.o.v. UTC in seconden (zonder DST).
			Gmtoffset int    `json:"gmtoffset"`
			Timezone  string `json:"timezone"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiTimezoneResponse parses an HTTP response from a PostApiTimezoneWithResponse call
func ParsePostApiTimezoneResponse(rsp *http.Response) (*PostApiTimezoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiTimezoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Success *bool   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiTimezonesResponse parses an HTTP response from a GetApiTimezonesWithResponse call
func ParseGetApiTimezonesResponse(rsp *http.Response) (*GetApiTimezonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimezonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Timezones *[]string `json:"timezones,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
